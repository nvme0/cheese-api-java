/* tslint:disable */
/* eslint-disable */
/**
 * Cheese API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Cheese
 */
export interface Cheese {
    /**
     * 
     * @type {number}
     * @memberof Cheese
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Cheese
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Cheese
     */
    'color': string;
    /**
     * 
     * @type {number}
     * @memberof Cheese
     */
    'pricePerKilo': number;
    /**
     * 
     * @type {string}
     * @memberof Cheese
     */
    'imageUrl'?: string;
}

/**
 * CheeseControllerApi - axios parameter creator
 * @export
 */
export const CheeseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/v1/cheese/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Cheese} cheese 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (cheese: Cheese, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cheese' is not null or undefined
            assertParamExists('create', 'cheese', cheese)
            const localVarPath = `/api/v1/cheese`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cheese, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get', 'id', id)
            const localVarPath = `/api/v1/cheese/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/cheese`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Cheese} cheese 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: number, cheese: Cheese, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'cheese' is not null or undefined
            assertParamExists('update', 'cheese', cheese)
            const localVarPath = `/api/v1/cheese/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cheese, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheeseControllerApi - functional programming interface
 * @export
 */
export const CheeseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheeseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Cheese} cheese 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(cheese: Cheese, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cheese>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(cheese, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cheese>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Cheese>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Cheese} cheese 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: number, cheese: Cheese, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cheese>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, cheese, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CheeseControllerApi - factory interface
 * @export
 */
export const CheeseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheeseControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp._delete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Cheese} cheese 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(cheese: Cheese, options?: any): AxiosPromise<Cheese> {
            return localVarFp.create(cheese, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: number, options?: any): AxiosPromise<Cheese> {
            return localVarFp.get(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: any): AxiosPromise<Array<Cheese>> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Cheese} cheese 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: number, cheese: Cheese, options?: any): AxiosPromise<Cheese> {
            return localVarFp.update(id, cheese, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in CheeseControllerApi.
 * @export
 * @interface CheeseControllerApiDeleteRequest
 */
export interface CheeseControllerApiDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof CheeseControllerApiDelete
     */
    readonly id: number
}

/**
 * Request parameters for create operation in CheeseControllerApi.
 * @export
 * @interface CheeseControllerApiCreateRequest
 */
export interface CheeseControllerApiCreateRequest {
    /**
     * 
     * @type {Cheese}
     * @memberof CheeseControllerApiCreate
     */
    readonly cheese: Cheese
}

/**
 * Request parameters for get operation in CheeseControllerApi.
 * @export
 * @interface CheeseControllerApiGetRequest
 */
export interface CheeseControllerApiGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CheeseControllerApiGet
     */
    readonly id: number
}

/**
 * Request parameters for update operation in CheeseControllerApi.
 * @export
 * @interface CheeseControllerApiUpdateRequest
 */
export interface CheeseControllerApiUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof CheeseControllerApiUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Cheese}
     * @memberof CheeseControllerApiUpdate
     */
    readonly cheese: Cheese
}

/**
 * CheeseControllerApi - object-oriented interface
 * @export
 * @class CheeseControllerApi
 * @extends {BaseAPI}
 */
export class CheeseControllerApi extends BaseAPI {
    /**
     * 
     * @param {CheeseControllerApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheeseControllerApi
     */
    public _delete(requestParameters: CheeseControllerApiDeleteRequest, options?: AxiosRequestConfig) {
        return CheeseControllerApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CheeseControllerApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheeseControllerApi
     */
    public create(requestParameters: CheeseControllerApiCreateRequest, options?: AxiosRequestConfig) {
        return CheeseControllerApiFp(this.configuration).create(requestParameters.cheese, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CheeseControllerApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheeseControllerApi
     */
    public get(requestParameters: CheeseControllerApiGetRequest, options?: AxiosRequestConfig) {
        return CheeseControllerApiFp(this.configuration).get(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheeseControllerApi
     */
    public list(options?: AxiosRequestConfig) {
        return CheeseControllerApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CheeseControllerApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheeseControllerApi
     */
    public update(requestParameters: CheeseControllerApiUpdateRequest, options?: AxiosRequestConfig) {
        return CheeseControllerApiFp(this.configuration).update(requestParameters.id, requestParameters.cheese, options).then((request) => request(this.axios, this.basePath));
    }
}


